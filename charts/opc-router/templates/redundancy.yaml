{{- if .Values.project.redundancy.deploy }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "opc-router.redundancy.fullname" . }}
  labels:
    {{- include "opc-router.labels" . | nindent 4 }}
spec:
  revisionHistoryLimit: {{ .Values.containerHistoryLimit }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "opc-router.labels" . | nindent 8 }}
      {{- include "opc-router.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "opc-router.labels" . | nindent 8 }}
        {{- include "opc-router.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "opc-router.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "opcrouter/runtime:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: ready
              containerPort: 49954
              protocol: TCP
            - name: mongodb
              containerPort: 27017
              protocol: TCP
          # startupProbe:
          #   httpGet:
          #     path: /
          #     port: opcrouter
          readinessProbe:
            tcpSocket:
              port: ready
            initialDelaySeconds: {{ .Values.project.redundancy.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.project.redundancy.readinessProbe.periodSeconds}}
          # Environment variables for the opcrouter container
          env:
          # Variables for connecting a service to the mongodb if a service is specified
          - name: OR_I_ACCEPT_EULA
            value: {{ .Values.I_do_accept_the_EULA | quote }}
          # Loading environment variables specified in the values file
          {{- range .Values.envVars }}
          - name: "{{ keys . | first }}"
            value: "{{ values . | first }}"
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.project.projectRepo }}
      # Project repo is specified: Get and load project
      # Volume mount for the project and configuration file
          volumeMounts:
          - mountPath: /data
            name: redundancy-volume
          # Command and arguments for loading the project and configuration into the opcrouter
          command: ["/init", "dotnet", "/app/inray.OPCRouter.Service.dll", "import-project"]
          args: 
            - "--source"
            - "/data/project/{{ .Values.project.projectPath }}"
            - "--configdb"
            - "OPCRouterRuntime"
            - "--allow-clear-config"
            - "--start-service"
            {{- if .Values.project.configPath }}
            - "--runtime-configuration-filepath"
            - "/data/redundancyconfig.yaml"
            {{- end }}
        {{- if .Values.project.autoUpdate }}
        - name: kubernetes-proxy
          image: bitnami/kubectl:latest
          # Script for setting ssh credentials and cloning the repository onto the volume
          command: ['sh', '-c', "kubectl proxy;"]
        - name: git-ops
          image: alpine/git:latest
          # Script for setting ssh credentials and cloning the repository onto the volume
          command: ["sh", "-c"]
          args:
          - >-
            {{- include "project.gitops" $ | indent 12}}
          # Volume mount for the project and configuration file
          volumeMounts:
          - mountPath: /data
            name: redundancy-volume
          {{- if (or .Values.project.auth.ssh_key .Values.project.auth.ssh_secret) }}
          env:
          - name: PROJECT_SSH_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.project.auth.ssh_secret | default (printf "%s-%s" (include "opc-router.fullname" $) "secret" | trunc 63 | trimSuffix "-") }}
                key: ssh-privatekey
          {{- end }}
        {{- end }}
      # Init container for pulling the project files
      initContainers:
      - name: pull-project
        image: alpine/git:latest
        # Script for setting ssh credentials and cloning the repository onto the volume
        command: ["sh", "-c"]
        args:
          - >-
          {{- include "project.redundant.clone" $ | indent 10}}
        # Volume mount for the project and configuration file
        volumeMounts:
        - mountPath: /data
          name: redundancy-volume
        {{- if (or .Values.project.auth.ssh_key .Values.project.auth.ssh_secret) }}
        env:
        - name: PROJECT_SSH_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.project.auth.ssh_secret | default (printf "%s-%s" (include "opc-router.fullname" $) "secret" | trunc 63 | trimSuffix "-") }}
              key: ssh-privatekey
        {{- end }}
      # Volume for the project and configuration file
      volumes:
      - name: redundancy-volume
      {{- if .Values.project.redundancy.persistantVolume.deploy }}
        persistentVolumeClaim:
          claimName: {{ include "opc-router.redundancy.fullname" . }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
