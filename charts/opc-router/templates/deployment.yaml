apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "opc-router.fullname" . }}
  labels:
    {{- include "opc-router.labels" . | nindent 4 }}
spec:
  revisionHistoryLimit: {{ .Values.containerHistoryLimit }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "opc-router.labels" . | nindent 6 }}
      {{- include "opc-router.originalSelectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "opc-router.labels" . | nindent 8 }}
        {{- include "opc-router.originalSelectorLabels" . | nindent 8 }}
        {{- if not .Values.mongodb.deploy }}
        {{- include "opc-router.selectorLabels" . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "opc-router.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- if .Values.webManagement.https.disable }}
            - containerPort: 8080
              protocol: TCP
              name: web-management
            {{- else }}
            - containerPort: 8443
              protocol: TCP
              name: web-management
            {{- end }}
            {{- if not .Values.mongodb.deploy }}
            - name: mongodb
              containerPort: 27017
              protocol: TCP
            {{- end }}
          # Environment variables for the opcrouter container
          env:
          # Variables for connecting a service to the mongodb if a service is specified
          {{- if .Values.mongodb.deploy }}
          - name: OR_DATABASE_CONNECTION_STRING
            value: {{ include "getMongoDB" . }}
          {{- if .Values.mongodb.auth.enabled }}
          - name: OR_DATABASE_USERNAME
            value: root
          # Loading the password for the mongodb from secret
          - name: OR_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.mongodb.auth.existingSecret }}{{ .Values.mongodb.auth.existingSecret }}{{ else }}{{ .Release.Name }}-mongodb{{ end }}
                key: mongodb-root-password
          {{- end }}
          {{- end }}
          - name: OR_WEB_DISABLE_HTTPS
            value: {{ .Values.webManagement.https.disable | quote }}
          {{- if not .Values.webManagement.https.disable }}
          - name: OR_WEB_HTTPS_CERTIFICATE_PEM_FILE
            value: /https/tls.crt
          - name: OR_WEB_HTTPS_CERTIFICATE_KEY_PEM_FILE
            value: /https/tls.key
          {{- end }}
          {{- if .Values.webManagement.auth.disable }}
          - name: OR_DISABLE_AUTH
            value: {{ .Values.webManagement.auth.disable | quote }}
          {{- else }}
          {{- with .Values.webManagement.auth.initialUser.name }}
          - name: INITIAL_USERNAME
            value: {{ . | quote }}
          {{- end }}
          {{- with .Values.webManagement.auth.initialUser.password }}
          - name: INITIAL_PASSWORD
            value: {{ . | quote }}
          {{- end }}
          {{- end }}
          {{- if .Values.project.projectRepo }}
          - name: OR_IMPORT_SOURCE
            value: "/data/project/{{ .Values.project.projectPath }}"
          - name: OR_IMPORT_ALLOW_CLEAR_CONFIG
            value: "true"
          - name: OR_IMPORT_RUNTIME_CONFIGURATION_FILE
            value: "/data/project/{{ .Values.project.configPath }}"
          {{- end }}
          - name: OR_I_ACCEPT_EULA
            value: {{ .Values.I_do_accept_the_EULA | quote }}
          # Loading environment variables specified in the values file
          {{- range .Values.envVars }}
          - name: "{{ keys . | first }}"
            value: "{{ values . | first }}"
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          # Volume mount for license
          volumeMounts:
          - mountPath: /data
            name: inray-volume
          - mountPath: /var/log/opcrouter
            name: log-volume
          {{- if not .Values.webManagement.https.disable }}
          - mountPath: /https
            name: https-volume
            readOnly: true
          {{- end }}
          {{- if .Values.project.projectRepo }}
          - mountPath: /data/project
            name: project-volume
          {{- end }}
      {{- if .Values.project.projectRepo }}
        {{- if not .Values.project.autoUpdate.disable }}
        - name: kubernetes-proxy
          image: bitnami/kubectl:latest
          # Script for setting ssh credentials and cloning the repository onto the volume
          command: ['sh', '-c', "kubectl proxy;"]
        - name: git-ops
          image: alpine/git:latest
          # Script for setting ssh credentials and cloning the repository onto the volume
          command: ["sh", "-c"]
          args:
          - >-
            {{- include "project.gitops" $ | indent 12}}
          # Volume mount for the project and configuration file
          volumeMounts:
          - mountPath: /data/project
            name: project-volume
          {{- if (or .Values.project.auth.ssh_key .Values.project.auth.ssh_secret) }}
          - mountPath: /.ssh
            name: ssh-volume
            readOnly: true
          {{- end }}
        {{- end }}
      # Init container for pulling the project files
      initContainers:
      - name: pull-project
        image: alpine/git:latest
        # Script for setting ssh credentials and cloning the repository onto the volume
        command: ["sh", "-c"]
        args:
          - >-
          {{- include "project.clone" $ | indent 10}}
        # Volume mount for the project and configuration file
        volumeMounts:
        - mountPath: /data/project
          name: project-volume
        {{- if (or .Values.project.auth.ssh_key .Values.project.auth.ssh_secret) }}
        - mountPath: /.ssh
          name: ssh-volume
          readOnly: true
        {{- end }}
      {{- end }}
      # Volume for the project and configuration file
      volumes:
      - name: inray-volume
        persistentVolumeClaim:
          claimName: {{ include "opc-router.inray.fullname" . }}
      - name: log-volume
        persistentVolumeClaim:
          claimName: {{ include "opc-router.log.fullname" . }}
      {{- if not .Values.webManagement.https.disable }}
      - name: https-volume
        secret:
          type: kubernetes.io/tls
          secretName: {{ .Values.webManagement.https.existingTlsSecret | default (printf "%s-%s" (include "opc-router.fullname" $) "tls-secret" | trunc 63 | trimSuffix "-")}}
      {{- end }}
      {{- if (or .Values.project.auth.ssh_key .Values.project.auth.ssh_secret) }}
      - name: ssh-volume
        secret:
          type: kubernetes.io/ssh-auth
          secretName: {{ .Values.project.auth.ssh_secret | default (printf "%s-%s" (include "opc-router.fullname" $) "ssh-secret" | trunc 63 | trimSuffix "-")}}
      {{- end }}
      {{- if .Values.project.projectRepo }}
      - name: project-volume
        emptyDir: {}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}